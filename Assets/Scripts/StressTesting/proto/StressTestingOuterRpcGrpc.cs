// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: StressTestingOuterRpc.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

/// <summary>
///压测
/// </summary>
public static partial class StressTestingOuterService
{
  static readonly string __ServiceName = "StressTestingOuterService";

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (message is global::Google.Protobuf.IBufferMessage)
    {
      context.SetPayloadLength(message.CalculateSize());
      global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
      context.Complete();
      return;
    }
    #endif
    context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static class __Helper_MessageCache<T>
  {
    public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (__Helper_MessageCache<T>.IsBufferMessage)
    {
      return parser.ParseFrom(context.PayloadAsReadOnlySequence());
    }
    #endif
    return parser.ParseFrom(context.PayloadAsNewBuffer());
  }

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::StartTestRequest> __Marshaller_StartTestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StartTestRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::StartTestResponse> __Marshaller_StartTestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StartTestResponse.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::StopTestRequest> __Marshaller_StopTestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StopTestRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::StopTestResponse> __Marshaller_StopTestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StopTestResponse.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::RequestInterfaceRequest> __Marshaller_RequestInterfaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RequestInterfaceRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::RequestInterfaceResponse> __Marshaller_RequestInterfaceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RequestInterfaceResponse.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::PushInterfaceRequest> __Marshaller_PushInterfaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PushInterfaceRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::PushInterfaceResponse> __Marshaller_PushInterfaceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PushInterfaceResponse.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::StatisticsLogRequest> __Marshaller_StatisticsLogRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StatisticsLogRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::StatisticsLogResponse> __Marshaller_StatisticsLogResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::StatisticsLogResponse.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::WorkerServerInfoRequest> __Marshaller_WorkerServerInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WorkerServerInfoRequest.Parser));
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Marshaller<global::WorkerServerInfoResponse> __Marshaller_WorkerServerInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::WorkerServerInfoResponse.Parser));

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::StartTestRequest, global::StartTestResponse> __Method_startTest = new grpc::Method<global::StartTestRequest, global::StartTestResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "startTest",
      __Marshaller_StartTestRequest,
      __Marshaller_StartTestResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::StopTestRequest, global::StopTestResponse> __Method_stopTest = new grpc::Method<global::StopTestRequest, global::StopTestResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "stopTest",
      __Marshaller_StopTestRequest,
      __Marshaller_StopTestResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::RequestInterfaceRequest, global::RequestInterfaceResponse> __Method_requestInterfaceInfo = new grpc::Method<global::RequestInterfaceRequest, global::RequestInterfaceResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "requestInterfaceInfo",
      __Marshaller_RequestInterfaceRequest,
      __Marshaller_RequestInterfaceResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::PushInterfaceRequest, global::PushInterfaceResponse> __Method_pushInterfaceInfo = new grpc::Method<global::PushInterfaceRequest, global::PushInterfaceResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "pushInterfaceInfo",
      __Marshaller_PushInterfaceRequest,
      __Marshaller_PushInterfaceResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::StatisticsLogRequest, global::StatisticsLogResponse> __Method_statisticsLog = new grpc::Method<global::StatisticsLogRequest, global::StatisticsLogResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "statisticsLog",
      __Marshaller_StatisticsLogRequest,
      __Marshaller_StatisticsLogResponse);

  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  static readonly grpc::Method<global::WorkerServerInfoRequest, global::WorkerServerInfoResponse> __Method_workerServerInfo = new grpc::Method<global::WorkerServerInfoRequest, global::WorkerServerInfoResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "workerServerInfo",
      __Marshaller_WorkerServerInfoRequest,
      __Marshaller_WorkerServerInfoResponse);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::StressTestingOuterRpcReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of StressTestingOuterService</summary>
  [grpc::BindServiceMethod(typeof(StressTestingOuterService), "BindService")]
  public abstract partial class StressTestingOuterServiceBase
  {
    /// <summary>
    /// 开始测试
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::StartTestResponse> startTest(global::StartTestRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    /// 停止测试
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::StopTestResponse> stopTest(global::StopTestRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    ///请求接口统计信息
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::RequestInterfaceResponse> requestInterfaceInfo(global::RequestInterfaceRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    ///推送接口统计信息
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::PushInterfaceResponse> pushInterfaceInfo(global::PushInterfaceRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    ///统计日志
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::StatisticsLogResponse> statisticsLog(global::StatisticsLogRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    /// <summary>
    ///机器信息查询
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::System.Threading.Tasks.Task<global::WorkerServerInfoResponse> workerServerInfo(global::WorkerServerInfoRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for StressTestingOuterService</summary>
  public partial class StressTestingOuterServiceClient : grpc::ClientBase<StressTestingOuterServiceClient>
  {
    /// <summary>Creates a new client for StressTestingOuterService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public StressTestingOuterServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for StressTestingOuterService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public StressTestingOuterServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    protected StressTestingOuterServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    protected StressTestingOuterServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    /// <summary>
    /// 开始测试
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::StartTestResponse startTest(global::StartTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return startTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 开始测试
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::StartTestResponse startTest(global::StartTestRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_startTest, null, options, request);
    }
    /// <summary>
    /// 开始测试
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::StartTestResponse> startTestAsync(global::StartTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return startTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 开始测试
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::StartTestResponse> startTestAsync(global::StartTestRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_startTest, null, options, request);
    }
    /// <summary>
    /// 停止测试
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::StopTestResponse stopTest(global::StopTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return stopTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 停止测试
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::StopTestResponse stopTest(global::StopTestRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_stopTest, null, options, request);
    }
    /// <summary>
    /// 停止测试
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::StopTestResponse> stopTestAsync(global::StopTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return stopTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// 停止测试
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::StopTestResponse> stopTestAsync(global::StopTestRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_stopTest, null, options, request);
    }
    /// <summary>
    ///请求接口统计信息
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::RequestInterfaceResponse requestInterfaceInfo(global::RequestInterfaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return requestInterfaceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///请求接口统计信息
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::RequestInterfaceResponse requestInterfaceInfo(global::RequestInterfaceRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_requestInterfaceInfo, null, options, request);
    }
    /// <summary>
    ///请求接口统计信息
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::RequestInterfaceResponse> requestInterfaceInfoAsync(global::RequestInterfaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return requestInterfaceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///请求接口统计信息
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::RequestInterfaceResponse> requestInterfaceInfoAsync(global::RequestInterfaceRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_requestInterfaceInfo, null, options, request);
    }
    /// <summary>
    ///推送接口统计信息
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::PushInterfaceResponse pushInterfaceInfo(global::PushInterfaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return pushInterfaceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///推送接口统计信息
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::PushInterfaceResponse pushInterfaceInfo(global::PushInterfaceRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_pushInterfaceInfo, null, options, request);
    }
    /// <summary>
    ///推送接口统计信息
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::PushInterfaceResponse> pushInterfaceInfoAsync(global::PushInterfaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return pushInterfaceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///推送接口统计信息
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::PushInterfaceResponse> pushInterfaceInfoAsync(global::PushInterfaceRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_pushInterfaceInfo, null, options, request);
    }
    /// <summary>
    ///统计日志
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::StatisticsLogResponse statisticsLog(global::StatisticsLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return statisticsLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///统计日志
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::StatisticsLogResponse statisticsLog(global::StatisticsLogRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_statisticsLog, null, options, request);
    }
    /// <summary>
    ///统计日志
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::StatisticsLogResponse> statisticsLogAsync(global::StatisticsLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return statisticsLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///统计日志
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::StatisticsLogResponse> statisticsLogAsync(global::StatisticsLogRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_statisticsLog, null, options, request);
    }
    /// <summary>
    ///机器信息查询
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::WorkerServerInfoResponse workerServerInfo(global::WorkerServerInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return workerServerInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///机器信息查询
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual global::WorkerServerInfoResponse workerServerInfo(global::WorkerServerInfoRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_workerServerInfo, null, options, request);
    }
    /// <summary>
    ///机器信息查询
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::WorkerServerInfoResponse> workerServerInfoAsync(global::WorkerServerInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return workerServerInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///机器信息查询
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public virtual grpc::AsyncUnaryCall<global::WorkerServerInfoResponse> workerServerInfoAsync(global::WorkerServerInfoRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_workerServerInfo, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    protected override StressTestingOuterServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new StressTestingOuterServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  public static grpc::ServerServiceDefinition BindService(StressTestingOuterServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_startTest, serviceImpl.startTest)
        .AddMethod(__Method_stopTest, serviceImpl.stopTest)
        .AddMethod(__Method_requestInterfaceInfo, serviceImpl.requestInterfaceInfo)
        .AddMethod(__Method_pushInterfaceInfo, serviceImpl.pushInterfaceInfo)
        .AddMethod(__Method_statisticsLog, serviceImpl.statisticsLog)
        .AddMethod(__Method_workerServerInfo, serviceImpl.workerServerInfo).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
  public static void BindService(grpc::ServiceBinderBase serviceBinder, StressTestingOuterServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_startTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::StartTestRequest, global::StartTestResponse>(serviceImpl.startTest));
    serviceBinder.AddMethod(__Method_stopTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::StopTestRequest, global::StopTestResponse>(serviceImpl.stopTest));
    serviceBinder.AddMethod(__Method_requestInterfaceInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RequestInterfaceRequest, global::RequestInterfaceResponse>(serviceImpl.requestInterfaceInfo));
    serviceBinder.AddMethod(__Method_pushInterfaceInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PushInterfaceRequest, global::PushInterfaceResponse>(serviceImpl.pushInterfaceInfo));
    serviceBinder.AddMethod(__Method_statisticsLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::StatisticsLogRequest, global::StatisticsLogResponse>(serviceImpl.statisticsLog));
    serviceBinder.AddMethod(__Method_workerServerInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::WorkerServerInfoRequest, global::WorkerServerInfoResponse>(serviceImpl.workerServerInfo));
  }

}
#endregion
